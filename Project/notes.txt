    Whenever dealing with Database.
Always keep in mind that it can always cause an error so always use better approach by using
try catch or Using Promises as they give us an option of resolve or reject which can be used to handle errors.

2nd thing is that Database is always on another CONTINENT which means there could be a delay so whenever 
making requests to DB always use ASYNC/AWAIT.



import mongoose from "mongoose";
import express from "express";
import { DB_NAME } from "./constant.js";

const app = express();

/* 1st and unprofessiomal approach to connect Database it causes Pollution in index.js file
 Using IFFE  Function .It excecutes itself while program starts without calling it
(async () => {
  try {
    await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`);

    app.on("Error", (error) => {
      console.error("Error : ", error.message);
    });

    app.listen(process.env.PORT, () => {
      console.log(`Server is running on port ${process.env.PORT}`);
    });
  } catch (error) {
    console.error("Error in connecting to Database", error.message);
    throw error;
  }
})(); */

For (.env)

//This approach works but it doesn't keep consistency. As it causes mixture of ES6 and CommonJS ;
// require("dotenv").config({ path: "./env" });

So to counter it we have to add this to dev script:-
"dev": "nodemon -r dotenv/config --experimental-json-modules /src/index.js"

and use this in code 

import dotenv from "dotenv";

in Path We Give the Path of Enviroment Variables

dotenv.config({
  path: "./env",
});